//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Paradox.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class ParadoxLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, IDENTIFIER=4, NUMBER=5, WHITESPACE=6, COMMENT=7, 
		BOM=8;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "IDENTIFIER", "NUMBER", "INT", "WHITESPACE", "COMMENT", 
		"BOM"
	};


	public ParadoxLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public ParadoxLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'='", "'{'", "'}'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, "IDENTIFIER", "NUMBER", "WHITESPACE", "COMMENT", 
		"BOM"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Paradox.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ParadoxLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\n', 'M', '\b', '\x1', '\x4', '\x2', '\t', '\x2', '\x4', 
		'\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', 
		'\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', 
		'\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x5', '\x6', '\x5', '\x1D', '\n', '\x5', '\r', '\x5', '\xE', '\x5', 
		'\x1E', '\x3', '\x6', '\x5', '\x6', '\"', '\n', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x6', '\x6', '\'', '\n', '\x6', '\r', '\x6', '\xE', 
		'\x6', '(', '\x5', '\x6', '+', '\n', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\a', '\a', '\x30', '\n', '\a', '\f', '\a', '\xE', '\a', 
		'\x33', '\v', '\a', '\x5', '\a', '\x35', '\n', '\a', '\x3', '\b', '\x6', 
		'\b', '\x38', '\n', '\b', '\r', '\b', '\xE', '\b', '\x39', '\x3', '\b', 
		'\x3', '\b', '\x3', '\t', '\x3', '\t', '\a', '\t', '@', '\n', '\t', '\f', 
		'\t', '\xE', '\t', '\x43', '\v', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\n', '\x6', '\n', 'H', '\n', '\n', '\r', '\n', '\xE', '\n', 'I', '\x3', 
		'\n', '\x3', '\n', '\x2', '\x2', '\v', '\x3', '\x3', '\x5', '\x4', '\a', 
		'\x5', '\t', '\x6', '\v', '\a', '\r', '\x2', '\xF', '\b', '\x11', '\t', 
		'\x13', '\n', '\x3', '\x2', '\b', '\t', '\x2', '$', '$', ')', ')', '/', 
		'\x30', '\x32', '<', '\x42', '\\', '\x61', '\x61', '\x63', '|', '\x3', 
		'\x2', '\x32', ';', '\x3', '\x2', '\x33', ';', '\x5', '\x2', '\v', '\f', 
		'\xF', '\xF', '\"', '\"', '\x4', '\x2', '\f', '\f', '\xF', '\xF', '\x5', 
		'\x2', '\xBD', '\xBD', '\xC1', '\xC1', '\xF1', '\xF1', '\x2', 'T', '\x2', 
		'\x3', '\x3', '\x2', '\x2', '\x2', '\x2', '\x5', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\a', '\x3', '\x2', '\x2', '\x2', '\x2', '\t', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\v', '\x3', '\x2', '\x2', '\x2', '\x2', '\xF', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x11', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\x13', '\x3', '\x2', '\x2', '\x2', '\x3', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\x5', '\x17', '\x3', '\x2', '\x2', '\x2', '\a', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\t', '\x1C', '\x3', '\x2', '\x2', '\x2', '\v', '!', 
		'\x3', '\x2', '\x2', '\x2', '\r', '\x34', '\x3', '\x2', '\x2', '\x2', 
		'\xF', '\x37', '\x3', '\x2', '\x2', '\x2', '\x11', '=', '\x3', '\x2', 
		'\x2', '\x2', '\x13', 'G', '\x3', '\x2', '\x2', '\x2', '\x15', '\x16', 
		'\a', '?', '\x2', '\x2', '\x16', '\x4', '\x3', '\x2', '\x2', '\x2', '\x17', 
		'\x18', '\a', '}', '\x2', '\x2', '\x18', '\x6', '\x3', '\x2', '\x2', '\x2', 
		'\x19', '\x1A', '\a', '\x7F', '\x2', '\x2', '\x1A', '\b', '\x3', '\x2', 
		'\x2', '\x2', '\x1B', '\x1D', '\t', '\x2', '\x2', '\x2', '\x1C', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', '\x1D', '\x1E', '\x3', '\x2', '\x2', '\x2', 
		'\x1E', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x1F', '\x3', '\x2', 
		'\x2', '\x2', '\x1F', '\n', '\x3', '\x2', '\x2', '\x2', ' ', '\"', '\a', 
		'/', '\x2', '\x2', '!', ' ', '\x3', '\x2', '\x2', '\x2', '!', '\"', '\x3', 
		'\x2', '\x2', '\x2', '\"', '#', '\x3', '\x2', '\x2', '\x2', '#', '*', 
		'\x5', '\r', '\a', '\x2', '$', '&', '\a', '\x30', '\x2', '\x2', '%', '\'', 
		'\t', '\x3', '\x2', '\x2', '&', '%', '\x3', '\x2', '\x2', '\x2', '\'', 
		'(', '\x3', '\x2', '\x2', '\x2', '(', '&', '\x3', '\x2', '\x2', '\x2', 
		'(', ')', '\x3', '\x2', '\x2', '\x2', ')', '+', '\x3', '\x2', '\x2', '\x2', 
		'*', '$', '\x3', '\x2', '\x2', '\x2', '*', '+', '\x3', '\x2', '\x2', '\x2', 
		'+', '\f', '\x3', '\x2', '\x2', '\x2', ',', '\x35', '\a', '\x32', '\x2', 
		'\x2', '-', '\x31', '\t', '\x4', '\x2', '\x2', '.', '\x30', '\t', '\x3', 
		'\x2', '\x2', '/', '.', '\x3', '\x2', '\x2', '\x2', '\x30', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '\x31', '/', '\x3', '\x2', '\x2', '\x2', '\x31', 
		'\x32', '\x3', '\x2', '\x2', '\x2', '\x32', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x33', '\x31', '\x3', '\x2', '\x2', '\x2', '\x34', ',', '\x3', 
		'\x2', '\x2', '\x2', '\x34', '-', '\x3', '\x2', '\x2', '\x2', '\x35', 
		'\xE', '\x3', '\x2', '\x2', '\x2', '\x36', '\x38', '\t', '\x5', '\x2', 
		'\x2', '\x37', '\x36', '\x3', '\x2', '\x2', '\x2', '\x38', '\x39', '\x3', 
		'\x2', '\x2', '\x2', '\x39', '\x37', '\x3', '\x2', '\x2', '\x2', '\x39', 
		':', '\x3', '\x2', '\x2', '\x2', ':', ';', '\x3', '\x2', '\x2', '\x2', 
		';', '<', '\b', '\b', '\x2', '\x2', '<', '\x10', '\x3', '\x2', '\x2', 
		'\x2', '=', '\x41', '\a', '%', '\x2', '\x2', '>', '@', '\n', '\x6', '\x2', 
		'\x2', '?', '>', '\x3', '\x2', '\x2', '\x2', '@', '\x43', '\x3', '\x2', 
		'\x2', '\x2', '\x41', '?', '\x3', '\x2', '\x2', '\x2', '\x41', '\x42', 
		'\x3', '\x2', '\x2', '\x2', '\x42', '\x44', '\x3', '\x2', '\x2', '\x2', 
		'\x43', '\x41', '\x3', '\x2', '\x2', '\x2', '\x44', '\x45', '\b', '\t', 
		'\x2', '\x2', '\x45', '\x12', '\x3', '\x2', '\x2', '\x2', '\x46', 'H', 
		'\t', '\a', '\x2', '\x2', 'G', '\x46', '\x3', '\x2', '\x2', '\x2', 'H', 
		'I', '\x3', '\x2', '\x2', '\x2', 'I', 'G', '\x3', '\x2', '\x2', '\x2', 
		'I', 'J', '\x3', '\x2', '\x2', '\x2', 'J', 'K', '\x3', '\x2', '\x2', '\x2', 
		'K', 'L', '\b', '\n', '\x2', '\x2', 'L', '\x14', '\x3', '\x2', '\x2', 
		'\x2', '\f', '\x2', '\x1E', '!', '(', '*', '\x31', '\x34', '\x39', '\x41', 
		'I', '\x3', '\b', '\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
